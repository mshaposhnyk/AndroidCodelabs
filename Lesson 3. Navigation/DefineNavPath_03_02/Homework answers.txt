1. How do you enable your project to use navigation components?
  -Add dependencies for navigation-fragment-ktx and navigation-ui-ktx in the build.gradle (module) file.

2. Where are the possible routes through your app defined?
  -In a file (often called navigation.xml) in the res > navigation folder.

3. Which of the following statements about the NavHostFragment are true? Select all that apply.

   -You add the NavHostFragment to the main layout by adding a <fragment> whose name is androidx.navigation.fragment.NavHostFragment.
   -As the user moves between destinations defined in the navigation graph, the NavHostFragment swaps the fragments in and out as necessary.

4. Which of the following statements about the navigation graph are true? Select all that apply.

  -You create a potential path through the app from one Fragment to another by connecting the fragments in the navigation graph.
  -To open the navigation graph, you double-click the navigation file (navigation.xml) in the Android Studio Project pane, then click the Design tab.

5. Where do you set the ID of a Fragment to be used in navigation?
  -In the project's navigation file, either by setting the ID attribute in the navigation graph or in the navigation XML file in the res > navigation folder.

6. What else do you need to do so that when the user taps the Show headlines button, the app navigates to the HeadlinesFragment?
  -In the onclickListener for the Show headlines button, call navigate() on the navigation controller, passing the action that connects the NewsFragment to the HeadlinesFragment.

7. Which of the following statements are true regarding navigating forward and backward through the app? (Choose all that apply.)
  -The destination of the action_FragmentA_to_FragmentB action specifies that when the user is at FragmentA, the next destination in the app is FragmentB.
  -The popUpTo attribute of the action can modify where the app navigates to if the user taps the system Back button.

8. The user navigates from fragmentA to fragmentB to fragmentC, then taps the system Back button. In this situation, let's say you want the app to navigate back to fragmentA (instead of fragmentB). What's the correct way to set the popUpTo and popUpToInclusive attributes?
  -For action_FragmentA_to_FragmentB, set popUpTo to none and popUpToInclusive to no value. (You can omit both attributes.) For action_FragmentB_to_FragmentC, set popUpTo to fragmentA and popUpToInclusive to false.

9. When the user is viewing the News detail screen, what happens If they tap the system Back button at the bottom of the screen? Select all that apply (remembering that popUpTo is newsFragment).
 -If popUpToInclusive is true: Android navigates out of the app because there is nothing left in the back stack for this app.
 -If popUpToInclusive is false: The app goes back to the news home screen.

10. Where do you define the items for a menu?
 -In a menu_name.xml file in the res > menu folder, add an <item> tag for each menu item. Create separate XML files for each separate menu.

11. To enable the options menu in your app, you need to define the menu items. Then what do you need to do in the Activity or Fragment where the options menu is to appear?
 -Call setHasOptionsMenu(true) in onCreate() for an Activity, or in onCreateView() for a Fragment.
 -Implement onOptionsItemSelected() in the Activity or Fragment to determine what happens when a user selects a menu item in the options menu.

12. What do you need to do to enable a navigation drawer in your app? You can assume that your project is using the navigation graph and that you've already defined the menu items.
 -Use <DrawerLayout> as the root view in the relevant layout file, and add a <NavigationView> tag to that layout.

13. Following on from the previous question, you need to write some code to enable the navigation drawer to be displayed when the user swipes in from the left side of the screen?
In onCreate() within the Activity that creates the navigation controller, what is the right code to add?
 -B: NavigationUI.setupWithNavController(
    navigationView, navigationController)

14. How do you add support for the Up button at the top of the screen to enable users to get back to the app's home screen from anywhere in the app? What do you need to do in the relevant Activity?
 -In the res > menu folder, create the up_menu.xml file.
 -Link the navigation controller to the app bar using NavigationUI.setupActionBarWithNavController(context,navigationController)
 -Override onSupportNavigateUp() method to call navigateUp() on the navigation controller.